// <auto-generated />
using System;
using Maliev.OrderService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Maliev.OrderService.Data.Migrations
{
    [DbContext(typeof(OrderDbContext))]
    [Migration("20251004130037_SetVersionDefaultValue")]
    partial class SetVersionDefaultValue
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Maliev.OrderService.Data.Models.AuditLog", b =>
                {
                    b.Property<long>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("audit_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AuditId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("action");

                    b.Property<string>("ChangeDetails")
                        .HasColumnType("jsonb")
                        .HasColumnName("change_details");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("entity_type");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("PerformedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("performed_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("performed_by");

                    b.HasKey("AuditId");

                    b.HasIndex("Action")
                        .HasDatabaseName("IX_AuditLog_Action");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("IX_AuditLog_OrderId");

                    b.HasIndex("PerformedAt")
                        .HasDatabaseName("IX_AuditLog_PerformedAt");

                    b.HasIndex("PerformedBy")
                        .HasDatabaseName("IX_AuditLog_PerformedBy");

                    b.ToTable("audit_logs", (string)null);
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.NotificationSubscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubscriptionId"));

                    b.Property<string>("Channels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("[]")
                        .HasColumnName("channels");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsSubscribed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_subscribed");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasDatabaseName("IX_NotificationSubscription_CustomerId");

                    b.ToTable("notification_subscriptions", (string)null);
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("ActualDeliveryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actual_delivery_date");

                    b.Property<string>("AssignedEmployeeId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("assigned_employee_id");

                    b.Property<int?>("ColorId")
                        .HasColumnType("integer")
                        .HasColumnName("color_id");

                    b.Property<string>("ColorName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("color_name");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("customer_type");

                    b.Property<string>("DepartmentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("department_id");

                    b.Property<bool>("IsConfidential")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_confidential");

                    b.Property<int?>("LeadTimeDays")
                        .HasColumnType("integer")
                        .HasColumnName("lead_time_days");

                    b.Property<int?>("ManufacturedQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("manufactured_quantity");

                    b.Property<DateTime?>("MaterialCacheUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("material_cache_updated_at");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("integer")
                        .HasColumnName("material_id");

                    b.Property<string>("MaterialName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("material_name");

                    b.Property<int?>("OrderedQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("ordered_quantity");

                    b.Property<string>("PaymentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_id");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Unpaid")
                        .HasColumnName("payment_status");

                    b.Property<int?>("ProcessTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("process_type_id");

                    b.Property<DateTime?>("PromisedDeliveryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("promised_delivery_date");

                    b.Property<string>("QuoteCurrency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValue("THB")
                        .HasColumnName("quote_currency");

                    b.Property<decimal?>("QuotedAmount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("quoted_amount");

                    b.Property<string>("Requirements")
                        .HasColumnType("text")
                        .HasColumnName("requirements");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("service_category_id");

                    b.Property<int?>("SurfaceFinishingId")
                        .HasColumnType("integer")
                        .HasColumnName("surface_finishing_id");

                    b.Property<string>("SurfaceFinishingName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("surface_finishing_name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("version")
                        .HasDefaultValueSql("'\\x0000000000000000'::bytea");

                    b.HasKey("OrderId");

                    b.HasIndex("AssignedEmployeeId")
                        .HasDatabaseName("IX_Order_AssignedEmployeeId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Order_CreatedAt");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_Order_CustomerId");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("IX_Order_DepartmentId");

                    b.HasIndex("MaterialId")
                        .HasDatabaseName("IX_Order_MaterialId");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("IX_Order_PaymentId");

                    b.HasIndex("ProcessTypeId")
                        .HasDatabaseName("IX_Order_ProcessTypeId");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.Order3DDesignAttributes", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_id");

                    b.Property<string>("ComplexityLevel")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("complexity_level");

                    b.Property<string>("Deliverables")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("deliverables");

                    b.Property<string>("DesignSoftware")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("design_software");

                    b.Property<int>("RevisionRounds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2)
                        .HasColumnName("revision_rounds");

                    b.HasKey("OrderId");

                    b.ToTable("order_3d_design_attributes", (string)null);
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.Order3DPrintingAttributes", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_id");

                    b.Property<bool>("InsertRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("insert_required");

                    b.Property<bool>("PartAssemblyTestRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("part_assembly_test_required");

                    b.Property<string>("PartMarking")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("part_marking");

                    b.Property<bool>("ThreadTapRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("thread_tap_required");

                    b.HasKey("OrderId");

                    b.ToTable("order_3d_printing_attributes", (string)null);
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.Order3DScanningAttributes", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_id");

                    b.Property<bool>("DeviationReportRequested")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deviation_report_requested");

                    b.Property<string>("OutputFileFormats")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("output_file_formats");

                    b.Property<string>("RequiredAccuracy")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("required_accuracy");

                    b.Property<string>("ScanLocation")
                        .HasColumnType("text")
                        .HasColumnName("scan_location");

                    b.HasKey("OrderId");

                    b.ToTable("order_3d_scanning_attributes", (string)null);
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.OrderCncMachiningAttributes", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_id");

                    b.Property<string>("InspectionType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("inspection_type");

                    b.Property<string>("SurfaceRoughness")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("surface_roughness");

                    b.Property<bool>("TapRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("tap_required");

                    b.Property<string>("Tolerance")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tolerance");

                    b.HasKey("OrderId");

                    b.HasIndex("Tolerance")
                        .HasDatabaseName("IX_OrderCncMachiningAttributes_Tolerance");

                    b.ToTable("order_cnc_machining_attributes", (string)null);
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.OrderFile", b =>
                {
                    b.Property<long>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("file_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FileId"));

                    b.Property<string>("AccessLevel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Internal")
                        .HasColumnName("access_level");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DesignUnits")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("design_units");

                    b.Property<string>("FileCategory")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("file_category");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_name");

                    b.Property<string>("FileRole")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("file_role");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("file_type");

                    b.Property<string>("ObjectPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("object_path");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("uploaded_by");

                    b.HasKey("FileId");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_OrderFile_DeletedAt");

                    b.HasIndex("FileCategory")
                        .HasDatabaseName("IX_OrderFile_FileCategory");

                    b.HasIndex("FileRole")
                        .HasDatabaseName("IX_OrderFile_FileRole");

                    b.HasIndex("ObjectPath")
                        .IsUnique()
                        .HasDatabaseName("IX_OrderFile_ObjectPath");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("IX_OrderFile_OrderId");

                    b.ToTable("order_files", (string)null);
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.OrderNote", b =>
                {
                    b.Property<long>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("note_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("NoteId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note_text");

                    b.Property<string>("NoteType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("note_type");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_id");

                    b.HasKey("NoteId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_OrderNote_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_OrderNote_CreatedBy");

                    b.HasIndex("NoteType")
                        .HasDatabaseName("IX_OrderNote_NoteType");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("IX_OrderNote_OrderId");

                    b.ToTable("order_notes", (string)null);
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.OrderSheetMetalAttributes", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_id");

                    b.Property<string>("InspectionType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("inspection_type");

                    b.Property<string>("Thickness")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("thickness");

                    b.Property<string>("Tolerance")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tolerance");

                    b.Property<string>("WeldingDetails")
                        .HasColumnType("text")
                        .HasColumnName("welding_details");

                    b.Property<bool>("WeldingRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("welding_required");

                    b.HasKey("OrderId");

                    b.ToTable("order_sheet_metal_attributes", (string)null);
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.OrderStatus", b =>
                {
                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StatusId"));

                    b.Property<string>("CustomerNotes")
                        .HasColumnType("text")
                        .HasColumnName("customer_notes");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("text")
                        .HasColumnName("internal_notes");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("StatusId");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("IX_OrderStatus_OrderId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_OrderStatus_Status");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_OrderStatus_Timestamp");

                    b.ToTable("order_statuses", (string)null);
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.ProcessType", b =>
                {
                    b.Property<int>("ProcessTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("process_type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProcessTypeId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("service_category_id");

                    b.HasKey("ProcessTypeId");

                    b.HasIndex("ServiceCategoryId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_ProcessType_ServiceCategoryId_Name");

                    b.ToTable("process_types", (string)null);
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.ServiceCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_ServiceCategory_Name");

                    b.ToTable("service_categories", (string)null);
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.AuditLog", b =>
                {
                    b.HasOne("Maliev.OrderService.Data.Models.Order", "Order")
                        .WithMany("AuditLogs")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.Order", b =>
                {
                    b.HasOne("Maliev.OrderService.Data.Models.ProcessType", "ProcessType")
                        .WithMany("Orders")
                        .HasForeignKey("ProcessTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Maliev.OrderService.Data.Models.ServiceCategory", "ServiceCategory")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProcessType");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.Order3DDesignAttributes", b =>
                {
                    b.HasOne("Maliev.OrderService.Data.Models.Order", "Order")
                        .WithOne("DesignAttributes")
                        .HasForeignKey("Maliev.OrderService.Data.Models.Order3DDesignAttributes", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.Order3DPrintingAttributes", b =>
                {
                    b.HasOne("Maliev.OrderService.Data.Models.Order", "Order")
                        .WithOne("PrintingAttributes")
                        .HasForeignKey("Maliev.OrderService.Data.Models.Order3DPrintingAttributes", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.Order3DScanningAttributes", b =>
                {
                    b.HasOne("Maliev.OrderService.Data.Models.Order", "Order")
                        .WithOne("ScanningAttributes")
                        .HasForeignKey("Maliev.OrderService.Data.Models.Order3DScanningAttributes", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.OrderCncMachiningAttributes", b =>
                {
                    b.HasOne("Maliev.OrderService.Data.Models.Order", "Order")
                        .WithOne("CncAttributes")
                        .HasForeignKey("Maliev.OrderService.Data.Models.OrderCncMachiningAttributes", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.OrderFile", b =>
                {
                    b.HasOne("Maliev.OrderService.Data.Models.Order", "Order")
                        .WithMany("OrderFiles")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.OrderNote", b =>
                {
                    b.HasOne("Maliev.OrderService.Data.Models.Order", "Order")
                        .WithMany("OrderNotes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.OrderSheetMetalAttributes", b =>
                {
                    b.HasOne("Maliev.OrderService.Data.Models.Order", "Order")
                        .WithOne("SheetMetalAttributes")
                        .HasForeignKey("Maliev.OrderService.Data.Models.OrderSheetMetalAttributes", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.OrderStatus", b =>
                {
                    b.HasOne("Maliev.OrderService.Data.Models.Order", "Order")
                        .WithMany("OrderStatuses")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.ProcessType", b =>
                {
                    b.HasOne("Maliev.OrderService.Data.Models.ServiceCategory", "ServiceCategory")
                        .WithMany("ProcessTypes")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.Order", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("CncAttributes");

                    b.Navigation("DesignAttributes");

                    b.Navigation("OrderFiles");

                    b.Navigation("OrderNotes");

                    b.Navigation("OrderStatuses");

                    b.Navigation("PrintingAttributes");

                    b.Navigation("ScanningAttributes");

                    b.Navigation("SheetMetalAttributes");
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.ProcessType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Maliev.OrderService.Data.Models.ServiceCategory", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProcessTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
